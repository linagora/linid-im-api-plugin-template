stages:
  - validate
  - test
  - release

variables:
  GIT_DEPTH: 0
  MAVEN_CLI_OPTS: "-B -ntp -s gitlab-settings.xml"
  MAVEN_PROJECT_FILE: "pom.xml"

# ---------------- Check branch name JOB ----------------
branch-name-check:
  stage: validate
  image: alpine:latest
  tags:
    - check-author
    - curl
    - docker
    - docker-medium
    - packages.linagora.com
    - shared
    - ultralight
  script:
    - 'echo "Checking branch name: $CI_COMMIT_REF_NAME"'
    - |
      if ! echo "$CI_COMMIT_REF_NAME" | grep -Eq '^(main|dev|release\/[0-9]+\.[0-9]+\.[0-9]+|feature\/[a-z0-9._-]+|hotfix\/[a-z0-9._-]+)$'; then
        echo "❌ Invalid branch name: $CI_COMMIT_REF_NAME"
        echo "✅ Allowed formats: main, dev, release/x.y.z, feature/xxx, hotfix/xxx"
        exit 1
      fi
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: never

# ---------------- Check commit message JOB ----------------
commit-message-check:
  stage: validate
  image: maven:3.9.9-eclipse-temurin-21
  tags:
    - check-author
    - curl
    - docker
    - docker-medium
    - packages.linagora.com
    - shared
    - ultralight
  script:
    - mvn $MAVEN_CLI_OPTS io.github.zorin95670:semantic-version:0.2.0:check-commit
  variables:
    NEXUS_USERNAME: $NEXUS_USERNAME
    NEXUS_PASSWORD: $NEXUS_PASSWORD
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: never

# ---------------- Checkstyle validation JOB ----------------
checkstyle:
  stage: validate
  image: maven:3.9.9-eclipse-temurin-21
  tags:
    - check-author
    - curl
    - docker
    - docker-medium
    - packages.linagora.com
    - shared
    - ultralight
  script:
    - mvn $MAVEN_CLI_OPTS checkstyle:check
  variables:
    NEXUS_USERNAME: $NEXUS_USERNAME
    NEXUS_PASSWORD: $NEXUS_PASSWORD
  artifacts:
    when: always
    reports:
      junit: target/checkstyle-result.xml
    paths:
      - target/checkstyle-result.xml
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: never

# ---------------- Execute dependency check JOB ----------------
dependency-updates:
  image: maven:3.9.6-eclipse-temurin-11
  stage: validate
  tags:
    - check-author
    - curl
    - docker
    - docker-medium
    - packages.linagora.com
    - shared
    - ultralight
  script:
    - mvn $MAVEN_CLI_OPTS versions:display-dependency-updates
  variables:
    NEXUS_USERNAME: $NEXUS_USERNAME
    NEXUS_PASSWORD: $NEXUS_PASSWORD
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: never

# ---------------- Execute unit test JOB ----------------
unit-test:
  stage: test
  image: maven:3.9.9-eclipse-temurin-21
  tags:
    - check-author
    - curl
    - docker
    - docker-medium
    - packages.linagora.com
    - shared
    - ultralight
  script:
    - mvn $MAVEN_CLI_OPTS test
  variables:
    NEXUS_USERNAME: $NEXUS_USERNAME
    NEXUS_PASSWORD: $NEXUS_PASSWORD
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: never

# ---------------- Execute mutation test JOB ----------------
mutation-test:
  stage: test
  image: maven:3.9.9-eclipse-temurin-21
  dependencies:
    - unit-test
  tags:
    - check-author
    - curl
    - docker
    - docker-medium
    - packages.linagora.com
    - shared
    - ultralight
  script:
    - mvn $MAVEN_CLI_OPTS test
    - mvn $MAVEN_CLI_OPTS org.pitest:pitest-maven:mutationCoverage
  variables:
    NEXUS_USERNAME: $NEXUS_USERNAME
    NEXUS_PASSWORD: $NEXUS_PASSWORD
  rules:
    - if: '$CI_PIPELINE_SOURCE == "merge_request_event"'
      when: always
    - when: never

# ---------------- Generate new version JOB ----------------
bump_template_version:
  image: maven:3.9.9-eclipse-temurin-21
  stage: release
  tags:
    - check-author
    - curl
    - docker
    - docker-medium
    - packages.linagora.com
    - shared
    - ultralight
  before_script:
    - echo "Setting up Git"
    - apt-get update && apt-get install -y git curl jq
    - git config user.email "ci-bot@example.com"
    - git config user.name "CI Bot"
    - git remote set-url origin https://oauth2:${GITLAB_TOKEN}@ci.linagora.com/${CI_PROJECT_PATH}
    - git fetch --all
    - git checkout main
    - git pull -r
  script:
    # 1. Get latest version of template-dm-api-plugin from Nexus
    - echo "Fetching latest version from Nexus..."
    - |
      LATEST_VERSION=$(curl -s --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
      "https://ci.linagora.com/api/v4/projects/$(urlencode "linagora/lrs/LinID/linid-dm-v2/dm-api-core")
      /repository/files/pom.xml/raw?ref=main" \
      | grep -oPm1 "(?<=<version>)[^<]+")
    - 'echo "Latest version: $LATEST_VERSION'

    # 2. Create new branch
    - BRANCH_NAME="feature/bump_template_v$LATEST_VERSION"
    - git checkout -b "$BRANCH_NAME"

    # 3. Update pom.xml
    - echo "Updating pom.xml with version $LATEST_VERSION"
    - sed -i "s|<version>.*</version>|<version>$LATEST_VERSION</version>|" pom.xml
    - sed -i "/<artifactId>template-dm-api-plugin<\/artifactId>/ { N s|<version>
      .*</version>|<version>$LATEST_VERSION</version>|}" pom.xml

    # 4. Commit + push branch
    - git add pom.xml
    - 'git commit -m "chore: bump template-dm-api-plugin to v$LATEST_VERSION"'
    - git push origin "$BRANCH_NAME"

    # 5. Create Merge Request using GitLab API
    - |
      curl --header "PRIVATE-TOKEN: $GITLAB_TOKEN" \
        --data "source_branch=$BRANCH_NAME" \
        --data "target_branch=main" \
        --data "title=chore: bump template-dm-api-plugin to v$LATEST_VERSION" \
        https://ci.linagora.com/api/v4/projects/${CI_PROJECT_ID}/merge_requests
  rules:
    - if: '$CI_PIPELINE_SOURCE == "trigger"'
      when: always
    - when: never

release:
  image: maven:3.9.9-eclipse-temurin-21
  stage: release
  tags:
    - check-author
    - curl
    - docker
    - docker-medium
    - packages.linagora.com
    - shared
    - ultralight
  before_script:
    - echo "Setting up Git"
    - apt-get update && apt-get install -y git libxml2-utils
    - git config user.email "ci-bot@example.com"
    - git config user.name "CI Bot"
    - git remote set-url origin https://oauth2:${GITLAB_TOKEN}@ci.linagora.com/${CI_PROJECT_PATH}
    - git fetch --all
    - git checkout main
    - git pull --rebase
  script:
    # 1. Extract the version from pom.xml
    - VERSION=$(xmllint --xpath "string(//project/version)" pom.xml)
    - 'echo "Tagging version: v$VERSION"'

    # 2. Delete the local tag if it already exists
    - git tag -d "v$VERSION" || true

    # 3. Create an annotated tag
    - git tag -a "v$VERSION" -m "Release version v$VERSION"

    # 4. Push the tag (force it if it already exists remotely)
    - git push origin --force "v$VERSION"

  variables:
    GIT_STRATEGY: fetch
    NEXUS_USERNAME: $NEXUS_USERNAME
    NEXUS_PASSWORD: $NEXUS_PASSWORD
  rules:
    - if: '$CI_COMMIT_BRANCH == "main"'
      when: always
    - when: never
